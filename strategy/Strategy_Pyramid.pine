//@version=5

strategy(
    "(Strategy) NANPIN ", 
    overlay            = true, 
    precision          = 3, 
    pyramiding         = 99,
    calc_on_every_tick = false,
    process_orders_on_close = true,
    max_bars_back      = 5000,
    initial_capital    = 1000,
    default_qty_type   = strategy.percent_of_equity, 
    default_qty_value  = 12500, 
    currency           = "USD",
    commission_type    = strategy.commission.percent,
    commission_value   = 0.04, 
    margin_long        = 0, 
    margin_short       = 0) 

i_timer_A   = input.int(30,     "Since Last Entry Timer A /Hour",   step=30)
i_timer_B   = input.int(120,    "Since Last Entry Timer B /Hour",   step=30)
i_cooldown  = input.int(30,     "Since Last EXIT Timer /Hour",      step=30)

i_GO_LONG   = input.bool(true,  "LONG  ON/OFF")
i_GO_SHORT  = input.bool(false, "SHORT ON/OFF")
i_REF       = input.int(250,    "Reference Length /min",            step=30)
i_ROA       = input.int(10,     "KANREKI ROA /%",                   step=2)
i_LV        = input.int(5,      "Leverage",                         step=1) 

i_Target    = input.int(150,    "KANREKI Target CTR /%",            step=5)
i_Loss      = input.int(100,    "RiRi Losscut Multiplier /% ",      step=10)


// Timeframe --------------------------------------------------------------------------
tf          = timeframe.multiplier

// Open Trades --------------------------------------------------------------------------
OT_0        = strategy.opentrades == 0
OT_1        = strategy.opentrades == 1
OT_2        = strategy.opentrades == 2
OT_3        = strategy.opentrades == 3

LONG        = strategy.opentrades.size(0) > 0
SHORT       = strategy.opentrades.size(0) < 0

// Entry Price --------------------------------------------------------------------------
EP          = strategy.opentrades.entry_price(0)
AveEP       = strategy.position_avg_price

// Wallet Balance --------------------------------------------------------------------------
WB          = strategy.initial_capital + strategy.netprofit
cond_WB     = WB > 300

// Average True Range --------------------------------------------------------------------------
ATR         = request.security(syminfo.tickerid,'D',ta.ema(ta.tr,10), lookahead=barmerge.lookahead_on)
ATRlot      = ATR*0.01
ATRpct      = (ATR/close)*100

// EMA --------------------------------------------------------------------------
EMA5        = request.security(syminfo.tickerid,'5',ta.ema(hlc3, 5*24*12),   lookahead=barmerge.lookahead_on)
EMA25       = request.security(syminfo.tickerid,'15',ta.ema(hlc3, 25*24*4),  lookahead=barmerge.lookahead_on)
EMA100      = request.security(syminfo.tickerid,'30',ta.ema(hlc3, 100*24*2), lookahead=barmerge.lookahead_on)
DivEMA5     = ((close - EMA5)/close)*100
DivEMA25    = ((close - EMA25)/close)*100
DivEMA100   = ((close - EMA100)/close)*100

// OVERHEAT --------------------------------------------------------------------------
overheat    = DivEMA5>10 

// Calc 1 Hour --------------------------------------------------------------------------
hour_1      = 60/tf

// Timer -------------------------------------------------------------------------
timer_A     = strategy.opentrades.entry_bar_index(strategy.opentrades - 1) + (i_timer_A/tf)  < bar_index
timer_B     = strategy.opentrades.entry_bar_index(strategy.opentrades - 1) + (i_timer_B/tf)  < bar_index
cooldown    = strategy.closedtrades > 0 ? strategy.closedtrades.exit_bar_index(strategy.closedtrades - 1) + (i_cooldown/tf) < bar_index : close > 0

// Too Late --------------------------------------------------------------------------
rebound     = close - ta.lowest(low,30)
lockup      = ATR/1
tooLate     = rebound > lockup

// Lot --------------------------------------------------------------------------
lot         = (strategy.position_size*AveEP)/WB

//##################################################################################
//##############################   [ STRATEGY ]   ##################################
//##############################      NANPIN      ##################################
//##################################################################################

CTR         = ta.ema(ta.highest(high,i_REF/tf)-ta.lowest(low,i_REF/tf),4990 )   // Custum True Range
CTRlot      = CTR*0.01
CTRpct      = (CTR/close)*100

core        = ta.ema(close, i_REF/tf)
band_A      = core+CTR/1.5
band_V      = core-CTR/1.5

ROA         = i_ROA/100                                                         // Target ROA
Target      = CTR*(i_Target/100)                                                // Target Range by ROA

ROA_Profit  = WB*ROA                                                            // Target Profit
//ES        = ROA_Profit/Target                                                 // Entry Size
ES          = (WB*i_LV)/close                                                     // Entry Size


xO_core     = ta.crossover(close, core)                                         // Crossover/Crossunder
xO_A        = ta.crossover(close, band_A)
xO_V        = ta.crossover(close, band_V)
xU_core     = ta.crossunder(close, core)
xU_A        = ta.crossunder(close, band_A)
xU_V        = ta.crossunder(close, band_V)

O_core      = close > core                                                      // Over/Under
O_A         = close > band_A
O_V         = close > band_V
U_core      = close < core
U_A         = close < band_A
U_V         = close < band_V






//LONG-LONG-LONG-LONG-LONG                  LONG-LONG-LONG-LONG-LONG-LONG
//LONG-LONG-LONG-LONG-LONG    #1-IN LONG    LONG-LONG-LONG-LONG-LONG-LONG
//LONG-LONG-LONG-LONG-LONG                  LONG-LONG-LONG-LONG-LONG-LONG

// LONG_cond   = xO_V[1] and O_V                                                   // VWMA Condition

LONG_cond = O_V and (xO_V[2] or xO_V[3] or xO_V[4] or xO_V[5]) and (U_V[6] or U_V[7] or U_V[8] or U_V[9]) 

//  Take Profit LONG  //
LONG_TP     = AveEP + Target                                                    // Exit Price
O_LONG_TP  = close > LONG_TP                                                   

//  Stop Loss LONG  //
// ROA_Loss    = ROA_Profit*(i_Loss*0.01)
// stop        = AveEP - Target*(i_Loss/100)

//..........................................................................................
if i_GO_LONG and cond_WB and OT_0 and LONG_cond and cooldown
    strategy.order("LONG@1 IN", strategy.long, qty = ES, alert_message = "test message")

if i_GO_LONG and cond_WB and OT_1 and LONG and O_LONG_TP 
    strategy.close_all(comment = "LONG@1 TP", alert_message = "test message")

// if i_GO_LONG and cond_WB and OT_1 and LONG and xO_core 
//     strategy.close_all(comment = "LONG@1 SL", alert_message = "test message")







//SHORT-SHORT-SHORT-SHORT                   SHORT-SHORT-SHORT-SHORT-SHORT
//SHORT-SHORT-SHORT-SHORT    #1-IN SHORT    SHORT-SHORT-SHORT-SHORT-SHORT
//SHORT-SHORT-SHORT-SHORT                   SHORT-SHORT-SHORT-SHORT-SHORT

SHORT_cond  = xU_V[1] and U_V                                                   // VWMA Condition

//  Take Profit SHORT  //
SHORT_TP     = AveEP - Target                                                   // Exit Price
xO_SHORT_TP  = close < SHORT_TP   

//  Stop Loss SHORT  //
// ROA_Loss = ROA_Profit*(i_Loss*0.01)
// stop     = AveEP + Target*(i_Loss/100)

//...........................................................................................
if i_GO_SHORT and cond_WB and OT_0 and SHORT_cond and cooldown 
    strategy.order("SHORT@1 IN", strategy.short, qty = ES, alert_message = "test message")

if i_GO_SHORT and cond_WB and xO_SHORT_TP and OT_1 and SHORT
    strategy.close_all(comment = "SHORT@1 TP", alert_message = "test message")

if i_GO_SHORT and cond_WB and xO_core and OT_1 and SHORT
    strategy.close_all(comment = "SHORT@1 SL", alert_message = "test message")



//##################################################################################
//##############################    [ ORDER ]   ####################################
//##############################   Margin Call  ####################################
//##################################################################################


onoff_MGC   = input.bool(true, " MarginCall ON/OFF")

i_cum       = input.float(10.0, "Maintenance Amount /$") //depends on Token Pair
i_MMR       = input.float(1.0, "Maintenance Margin Rate /%")

position    = strategy.position_size
// NotionalValue = AveEP*position
cum         = i_cum
side        = strategy.position_size > 0 ? 1 :-1
MMR         = i_MMR/100 
TMM         = 0
UNPL        = 0
LP          = (WB-TMM+UNPL+cum-side*position*AveEP)/(position*MMR-side*position) //LiquidPrice
MGC         = low < LP

if onoff_MGC
    strategy.close_all(when=MGC, comment = "(´×ω×`)",
     alert_message = "test message")





//#################################################################################
//##############################   INDICAROR   ####################################
//#################################################################################

// Plot --------------------------------------------------------------------------
all         = display.all
none        = display.none

p_ROA       = plot(ROA,     "x_ROA #1",     display=none)
p_ATR       = plot(ATR,     "x_ATR #2",     display=none)
p_Target    = plot(Target,  "x_Target #3",  display=none)
p_CTRpct    = plot(CTRpct,  "CTR %",        display=none)

p_AveEP     = plot(AveEP,   "Ave EP", color.new(color.yellow,0), style=plot.style_cross, display=all)

p_core      = plot(core,    "CORE", color.new(color.lime,0),    linewidth=1, display=all)
p_A         = plot(band_A,  "A",    color.new(color.aqua,0),    linewidth=1, display=all)
p_V         = plot(band_V,  "V",    color.new(color.red,0),     linewidth=1, display=all)
//p_MOVE    = plot(MOVE,    "MOVE", color.new(color.red,20),    linewidth=1, display=none)
//p_BASE    = plot(BASE,    "BASE", color.new(color.aqua,20),   linewidth=1, display=all)
p_MAG       = plot(OT_0  ? na : LP,         "Liquid Price",     color.new(#ff0000,30),  style=plot.style_cross, linewidth=1, display=all)
p_LONG_TP   = plot(LONG  ? LONG_TP  : na,   "NANPIN LONG_TP",   color.new(color.red,0), style=plot.style_cross, linewidth=1, display=all)
p_SHORT_TP  = plot(SHORT ? SHORT_TP : na,   "NANPIN SHORT_TP",  color.new(color.aqua,0),style=plot.style_cross, linewidth=1, display=all)

p_EMA5      = plot(EMA5,  "EMA5",  color=color.new(color.aqua, 50),   linewidth=3, style=plot.style_stepline, display=all)
p_EMA25     = plot(EMA25, "EMA25", color=color.new(color.yellow, 50), linewidth=3, style=plot.style_stepline, display=all)
p_EMA100    = plot(EMA100,"EMA100",color=color.new(color.purple, 50), linewidth=3, style=plot.style_stepline, display=all)











// BackGround --------------------------------------------------------------------------
bgc         = MGC==true ? color.new(#ff0000,30) : na
bgcolor(bgc)

// TABLE --------------------------------------------------------------------------
right       = text.align_right
left        = text.align_left
white       = color.new(#ffffff,0)
black       = color.new(#000000,0)

var table Table_TC = table.new(position.top_center, 100, 100)
table.cell(Table_TC,0,0, "", text_color = white,text_halign=left)
table.cell(Table_TC,1,0, str.tostring(math.round((bar_index/hour_1)/24,1))+" days", text_color = white,text_halign=left)

var table Table_TR = table.new(position.top_right, 100, 100)
table.cell(Table_TR,0,0, "WB ", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,1,0, str.tostring(math.round(WB,0))+"",text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,0,2, "CTRpct ", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,1,2, str.tostring(math.round(CTRpct,2))+"", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,0,4, "ATRpct ", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,1,4, str.tostring(math.round(ATRpct,2))+"", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,0,7, "", text_color=white, bgcolor=black, text_halign=right)
table.cell(Table_TR,1,7, "", text_color=white, bgcolor=black, text_halign=right)

var table Table_BL = table.new(position.bottom_left, 10, 20)
table.cell(Table_BL,0,0, "asset", text_color = white,text_halign=left)
table.cell(Table_BL,0,1, "equity", text_color = white,text_halign=left)
table.cell(Table_BL,0,3, "profit:loss ", text_color = white,text_halign=left)
table.cell(Table_BL,0,5, "max_drawdown", text_color = white,text_halign=left)
table.cell(Table_BL,0,8, "win:lose ", text_color = white,text_halign=left)
table.cell(Table_BL,1,0, str.tostring(math.round(WB,0)), text_color = white,text_halign=left)
table.cell(Table_BL,1,1, str.tostring(math.round(strategy.equity,1)), text_color = white,text_halign=left)
table.cell(Table_BL,1,3, str.tostring(math.round(strategy.grossprofit,0))+ " vs "
 +str.tostring(math.round(strategy.grossloss,0))+ " ("+str.tostring(math.round(strategy.netprofit,0))+ ")", text_color = white,text_halign=left)
table.cell(Table_BL,1,5, str.tostring(math.round(strategy.max_drawdown,1)), text_color = white,text_halign=left)
table.cell(Table_BL,1,8, str.tostring(math.round(strategy.wintrades,1))+ " vs "
 +str.tostring(math.round(strategy.losstrades,1)) + " ("+str.tostring(math.round(strategy.closedtrades,1))+ ")", text_color = white,text_halign=left)

var table Table_BC = table.new(position.bottom_center, 100, 100)
table.cell(Table_BC,0,0, "CTRpct", text_color = white,text_halign=left)
table.cell(Table_BC,1,0, str.tostring(math.round(CTRpct,3))+" %", text_color = white, text_halign=left)

var table Table_BR = table.new(position.bottom_right, 100, 100)
table.cell(Table_BR,0,5,  "ROA" , text_color = white,text_halign=right)
table.cell(Table_BR,1,5,  str.tostring(i_ROA),  text_color = white,text_halign=right)
table.cell(Table_BR,0,7,  "Taret" , text_color = white,text_halign=right)
table.cell(Table_BR,1,7,  str.tostring(i_Target),  text_color = white,text_halign=right)
table.cell(Table_BR,0,20,  "tf" , text_color = white,text_halign=right)
table.cell(Table_BR,1,20,  str.tostring(tf),  text_color = white,text_halign=right)




//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

// VWMA --------------------------------------------------------------------------
// ma1    = ta.vwma(hlc3, 60/tf)
// ma2    = ta.vwma(hlc3, 120/tf)
// ma3    = ta.vwma(hlc3, 180/tf)
// ma6    = ta.vwma(hlc3, 360/tf)
// ma12   = ta.vwma(hlc3, 720/tf)
// ma24   = ta.vwma(hlc3, 1440/tf)

// p_ma1  = plot(ma1, "ma1", color=color.new(color.blue,  0),     linewidth=1, display=none)
// p_ma2  = plot(ma2, "ma2", color=color.new(color.aqua,  50),    linewidth=1, display=none)
// p_ma3  = plot(ma3, "ma3", color=color.new(color.fuchsia,  50), linewidth=1, display=none)
// p_ma6  = plot(ma6, "ma6", color=color.new(color.white,  0),    linewidth=1, display=none)
// p_ma12 = plot(ma12,"ma12",color=color.new(color.white,  0),    linewidth=2, display=none)
// p_ma24 = plot(ma24,"ma24",color=color.new(color.white,  50),   linewidth=3, display=none)



// PLOT ATR --------------------------------------------------------------------------
// plot(TR,"TR", display = none)
// plot(ATR,"ATR", display = none)
// plot(CTR,"CTR", display = none)

// Downed --------------------------------------------------------------------------
// lower = strategy.position_avg_price-(ATRlot*50)
// down  = close < lower


// True Range --------------------------------------------------------------------------
// TR          = request.security(syminfo.tickerid,'D',ta.tr(1),lookahead=barmerge.lookahead_on)
// TRlot       = TR*0.01
// TRpct       = (TR/close)*100







// //##################################################################################
// //##############################    [ ENTRY ] FIX  ####################################
// //##############################     KANREKI    ####################################
// //##################################################################################


// i_ROA    = input.int(10, "KANREKI ROA /%", step=2)
// i_Target = input.int(20, "KANREKI Target ATR /%", step=2)

// // ROA & Target --------------------------------------------------------------------------
// ROA      = i_ROA/100
// Target   = ATR*(i_Target/100)


// K_GOoff  = input.bool(false, "KANREKI ON/OFF")

// i_K_ROA    = input.int(10, "KANREKI ROA /%", step=2)
// i_K_Target = input.int(20, "KANREKI Target ATR /%", step=2)
// i_K_core   = input.int(240, "KANREKI CORE MA /min", step=30)

// // ROA & Target --------------------------------------------------------------------------
// K_ROA    = i_K_ROA/100
// K_Target = ATR*(i_K_Target/100)

// // Entry Size --------------------------------------------------------------------------
// K_ES   = K_ROA_Profit/Target
// // K_ES   = (WB*5)/close 

// // VWMA Condition --------------------------------------------------------------------------
// K_vwma = O_V and
//  (xO_V[2] or xO_V[3] or xO_V[4] or xO_V[5]) and 
//  (U_V[6] or U_V[7] or U_V[8] or U_V[9]) 

// // Entry --------------------------------------------------------------------------
// K_IN = K_vwma and cooldown
// if K_GOoff
//     strategy.entry("KANREKI LONG", strategy.long, when = K_IN, qty = K_ES, alert_message = "test message")

// //##############################    [ EXIT ]    ####################################

// i_K_Loss = input.int(100, "KANREKI Losscut Multiplier /% ", step=2)

// // Exit Price --------------------------------------------------------------------------
// K_TP = AveEP + Target
// K_stop  = AveEP - Target*(i_K_Loss/100)

// // Hit Exit Price --------------------------------------------------------------------------
// K_xO_TP = ta.crossover(high, K_TP)
// //K_xO_TP = ta.crossover(low, core)
// K_U_stop  = close < band_V

// // Trigger Exit --------------------------------------------------------------------------
// K_TP = K_xO_TP and not OT_0
// K_SL = K_U_stop and timer_A and not OT_0

// // Exit --------------------------------------------------------------------------
// if K_GOoff
//     strategy.close_all(when = K_TP, comment = "K_OOO", alert_message = "test message")
//     strategy.close_all(when = K_SL, comment = "K_XXX", alert_message = "test message")
    
    
    
    

//##################################################################################
//##############################    [ ORDER ]   ####################################
//##############################      DOTEN     ####################################
//##################################################################################


// onoff_DOTEN = input.bool(false, "DOTEN ON/OFF")
// i_MA_MOVE = input.int(10, "MOVE /min", step=2)
// i_MA_BASE = input.int(100, "BASE /min", step=2)

// MOVE   = ta.vwma(hlc3, i_MA_MOVE/tf)
// BASE   = ta.vwma(hlc3, i_MA_BASE/tf)

// DOTEN_ES = WB/close 

// LONG_DOTEN_IN   = ta.crossover(MOVE, BASE)
// SHORT_DOTEN_IN  = ta.crossunder(MOVE, BASE)
// LONG_DOTEN_OUT  = ta.crossunder(close, MOVE)
// SHORT_DOTEN_OUT = ta.crossover(close, MOVE)

// if onoff_DOTEN
//     strategy.entry("DOTEN LONG IN ", strategy.short, qty = DOTEN_ES, when = LONG_DOTEN_IN)
//     strategy.entry("DOTEN SHORT IN ", strategy.long, qty = DOTEN_ES, when = SHORT_DOTEN_IN)
//     strategy.close_all(LONG_DOTEN_OUT ,"CLOSE DOTEN LONG")
//     strategy.close_all(SHORT_DOTEN_OUT ,"CLOSE DOTEN SHORT")




//##################################################################################
//##############################    [ ORDER ]   ####################################
//##############################      SPREAD    ####################################
//##################################################################################


// onoff_SPREAD = input.bool(false, "SPREAD ON/OFF")
// i_Loss_SPREAD = input.int(200, "SPREAD Losscut Multiplier /% ", step=2)

// cond_opentrades = strategy.opentrades == 0 or strategy.opentrades < 4

// SPREAD_ROA_Profit = WB*ROA  
// SPREAD_ROA_Loss   = SPREAD_ROA_Profit*(i_Loss_SPREAD*0.01)

// SPREAD_ES   = SPREAD_ROA_Profit/Target

// LONG_SPREAD  = cond_vwma and cond_WB and not overheat and cond_opentrades

// if onoff_SPREAD
//     strategy.order("1-1", strategy.long, when = LONG_SPREAD, qty = SPREAD_ES/4, alert_message = "test message")
//     strategy.order("1-2", strategy.long, when = LONG_SPREAD, qty = SPREAD_ES/4, alert_message = "test message")
//     strategy.order("1-3", strategy.long, when = LONG_SPREAD, qty = SPREAD_ES/4, alert_message = "test message")
//     strategy.order("1-4", strategy.long, when = LONG_SPREAD, qty = SPREAD_ES/4, alert_message = "test message")

// profitRangeLv1 = ATR*0.2   
// profitRangeLv2 = ATR*0.3   
// profitRangeLv3 = ATR*0.4   
// profitRangeLv4 = ATR*0.5

// if onoff_SPREAD
//     strategy.exit("exit 1-1", "1-1", qty_percent = 100, profit = profitRangeLv1/syminfo.mintick, comment = "closed 1-1")
//     strategy.exit("exit 1-2", "1-2", qty_percent = 100, profit = profitRangeLv2/syminfo.mintick, comment = "closed 1-2")
//     strategy.exit("exit 1-3", "1-3", qty_percent = 100, profit = profitRangeLv3/syminfo.mintick, comment = "closed 1-3")
//     strategy.exit("exit 1-4", "1-4", qty_percent = 100, profit = profitRangeLv4/syminfo.mintick, comment = "closed 1-4")
